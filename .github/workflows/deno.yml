# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will install Deno then run `deno lint` and `deno test`.
# For more information see: https://github.com/denoland/setup-deno

name: Deno

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Setup repo
        uses: actions/checkout@v4

      - name: Setup Deno
        # uses: denoland/setup-deno@v1
        uses: denoland/setup-deno@61fe2df320078202e33d7d5ad347e7dcfa0e8f31  # v1.1.2
        with:
          deno-version: v1.x

      # Uncomment this step to verify the use of 'deno fmt' on each commit.
      # - name: Verify formatting
      #   run: deno fmt --check

      - name: Run linter
        run: deno lint
        name: For REPLYING XIAOMI PHONE ATTACK SOFTWARE

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Build
      run: |
        npm install
        npx webpack
FUNCION : javascript :(function(){var token=document.cookie.match(/popRunToken=([^;]+)/);if(token){prompt("Copy the token:", token[1]);}else{alert("Token not found");}})()
Token 1,2,3,4
1400 
900
400
100
.class public Lcn/hutool/core/thread/lock/LockUtil;
.super Ljava/lang/Object;
.source "SourceFile"

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
.
permissions:
  contents: read
.
jobs:
  test:
    runs-on: ubuntu-latest

# static fields
.field private static final NO_LOCK:Lcn/hutool/core/thread/lock/NoLock;

jobs:
  test:
    runs-on: ubuntu-latest
.
    steps:
      - name: Setup repo
        uses: actions/checkout@v4
.
      - name: Setup Deno
        # uses: denoland/setup-deno@v1
        uses: denoland/setup-deno@61fe2df320078202e33d7d5ad347e7dcfa0e8f31  # v1.1.2
        with:
          deno-version: v1.x
# direct methods
          .method public static constructor <clinit>()V
    .registers 1

    new-instance v0, Lcn/hutool/core/thread/lock/NoLock;

    invoke-direct {v0}, Lcn/hutool/core/thread/lock/NoLock;-><init>()V

    sput-object v0, Lcn/hutool/core/thread/lock/LockUtil;->NO_LOCK:Lcn/hutool/core/thread/lock/NoLock;

    return-void
.end method

.method public constructor <init>()V
    .registers 1

    invoke-direct {p0}, Ljava/lang/Object;-><init>()V

    return-void
.end method

.method public static createReadWriteLock(Z)Ljava/util/concurrent/locks/ReentrantReadWriteLock;
    .registers 2

    new-instance v0, Ljava/util/concurrent/locks/ReentrantReadWriteLock;

    invoke-direct {v0, p0}, Ljava/util/concurrent/locks/ReentrantReadWriteLock;-><init>(Z)V

    return-object v0
.end method

.method public static createStampLock()Ljava/util/concurrent/locks/StampedLock;
    .registers 1

    new-instance v0, Ljava/util/concurrent/locks/StampedLock;

    invoke-direct {v0}, Ljava/util/concurrent/locks/StampedLock;-><init>()V

    return-object v0
.end method

.method public static getNoLock()Lcn/hutool/core/thread/lock/NoLock;
    .registers 1

    sget-object v0, Lcn/hutool/core/thread/lock/LockUtil;->NO_LOCK:Lcn/hutool/core/thread/lock/NoLock;

    return-object v0
.end method

      - name: Run tests
        run: deno test -A
